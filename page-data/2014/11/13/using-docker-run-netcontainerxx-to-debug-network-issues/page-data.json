{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/11/13/using-docker-run-netcontainerxx-to-debug-network-issues/","result":{"data":{"site":{"siteMetadata":{"title":"5π Consulting","author":"Johannes 'fish' Ziemke"}},"markdownRemark":{"id":"0cf97f71-9d6e-550f-8b23-04cbcb1095ba","html":"<p>Sharing the network namespace with a existing container is a less known feature of Docker. If you run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run --net=container:my-existing-container ...</code></pre></div>\n<p>Your container runs in the same network namespace, sharing the same network configuration as <code class=\"language-text\">my-existing-container</code>.</p>\n<p>This is very useful for debugging purposes: I just wanted to verify the current outgoing connections from a container in our infrastructure and realized that due to the network scoping that’s not easily possible. You can use <code class=\"language-text\">ip netns exec</code> but that assumes you have the namespace mounted to <code class=\"language-text\">/var/run/netns</code>. You can symlink things around but it’s ugly. Much nicer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -t -i --net=container:my-existing-container --rm ubuntu netstat -anp</code></pre></div>","frontmatter":{"title":"Using docker run --net=container:XX ... to debug network issues","date":"November 13, 2014","image":null}}},"pageContext":{"slug":"/2014/11/13/using-docker-run-netcontainerxx-to-debug-network-issues/","previous":{"fields":{"slug":"/2014/11/10/running-a-highly-available-load-balancer-on-docker/"},"frontmatter":{"title":"Running a highly available load balancer on Docker"}},"next":{"fields":{"slug":"/2015/01/08/containerized-infrastructure/"},"frontmatter":{"title":"Containerize your Infrastructure"}}}}}